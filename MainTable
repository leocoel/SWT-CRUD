package com.swt.test;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ViewForm;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
import com.swt.util.BaseDao;

//Swt使用集合显示数据库数据
public class MainTable {
	//创建display对象
	private static Display display;
	//主窗体
	private static Shell shell;
	//FormView容器
	private static ViewForm viewForm;
	//ToolBar工具栏
	private static ToolBar toolBar; 
	//创建组合模式
	private static Composite composite;
	//表格实例
	private static Table table;
	
	//main启动
		public static void main(String[] args) {
			getCreateShell();
	}
	//数据库交互
	public static void getCreateShell(){
		//创建display对象
		display = new Display();
		//构建shell主窗体
		shell = new Shell(display);
		//窗体标题
		shell.setText("显示List数据");
		//布局
		shell.setLayout(new FillLayout());
		
		getCreateB();
		
		try {
			//连接数据库
			Connection conn=BaseDao.getConnection();
			//Stringsql
			String sqlString="select * from user";		
			Statement statement=conn.createStatement();		
			ResultSet rSet=statement.executeQuery(sqlString);
			
			//查询用户表  把数据显示在表里
			while(rSet.next()){		
				TableItem item=new TableItem(table,SWT.LEFT);			
				String[] valueStrings={rSet.getString("uid"),rSet.getString("uname"),rSet.getString("upass")};			
				item.setText(valueStrings);	
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		//显示窗体
		shell.open();
		//效验窗体是否关闭
		while(!shell.isDisposed()){
			//检验Display线程状态是否忙
			if(!display.readAndDispatch()){
				//display线程休眠
				display.sleep();
			}
		}
		//注销display对象资源
		display.dispose();
	}
	
	//创建工具栏
	private static void getCreateToolBar(){
		toolBar = new ToolBar(viewForm, SWT.FLAT);
		ToolItem add = new ToolItem(toolBar, SWT.PUSH);
		add.setText("添加");
		//调用添加方法
		
		
		ToolItem update = new ToolItem(toolBar, SWT.PUSH);
		update.setText("修改");
		//调用修改方法
		
		
		ToolItem del = new ToolItem(toolBar, SWT.PUSH);
		del.setText("删除");
		//调用删除方法
		
		
	}
	
	//创建网格布局
	private static void getCreateComposite(){
		GridLayout gridLayout = new GridLayout();
		//设置网格的列数
		gridLayout.numColumns = 1;
		composite = new Composite(viewForm, SWT.NONE);
		composite.setLayout(gridLayout);
		getCreateTable();
		
	}
	
	//创建表格
	private static void getCreateTable(){
		GridData gridData = new GridData();
		gridData.horizontalSpan = 2;
		gridData.verticalSpan = 2;
		//水平充满
		gridData.horizontalAlignment = SWT.FILL;  
		//设置水平抢占
		gridData.grabExcessHorizontalSpace = true;
		//设置垂直抢占
		gridData.grabExcessVerticalSpace = true; 
		//垂直充满
		gridData.verticalAlignment = SWT.FILL;
		//设置宽度
		gridData.widthHint =100;
		//创建表格，使用SWT.FULL_SELECTION样式   可同时选中一行
		table  = new Table(composite,SWT.MULTI|SWT.CHECK|SWT.FULL_SELECTION);
		//设置显示表头
		table.setHeaderVisible(true);
		//设置表格布局
        table.setLayoutData(gridData);
        //设置显示表格线
        table.setLinesVisible(true);
        //创建表头的字符串数组
        String[] tableHeaber = {"ID","用户名","密码"};
        for(int i=0;i<tableHeaber.length;i++){
        	TableColumn tableColumn = new TableColumn(table,SWT.NONE);
        	tableColumn.setText(tableHeaber[i]);
        	//设置表头可以移动 默认为false
        	tableColumn.setMoveable(true);
        	table.getColumn(i).pack();        	
        }		
	}
	
	//创建面板
	private static void getCreateB(){	
		//创建ViewForm面板
		viewForm = new ViewForm(shell, SWT.NONE);
		viewForm.setTopCenterSeparate(true);
		getCreateToolBar();
		//设置工具栏位置
		viewForm.setTopLeft(toolBar);
		getCreateComposite();
		//设置面板位置
		viewForm.setContent(composite);  
		
	}
}
